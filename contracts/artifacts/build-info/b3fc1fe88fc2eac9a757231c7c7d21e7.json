{
	"id": "b3fc1fe88fc2eac9a757231c7c7d21e7",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.0",
	"solcLongVersion": "0.6.0+commit.26b70077",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/GatekeeperOne.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract GatekeeperOne {\r\n    address public entrant;\r\n\r\n    modifier gateOne() {\r\n        require(msg.sender != tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier gateTwo() {\r\n        require(gasleft() % 8191 == 0);\r\n        _;\r\n    }\r\n\r\n    modifier gateThree(bytes8 _gateKey) {\r\n        require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), \"GatekeeperOne: invalid gateThree part one\");\r\n        require(uint32(uint64(_gateKey)) != uint64(_gateKey), \"GatekeeperOne: invalid gateThree part two\");\r\n        require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), \"GatekeeperOne: invalid gateThree part three\");\r\n        _;\r\n    }\r\n\r\n    function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {\r\n        entrant = tx.origin;\r\n        return true;\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/GatekeeperOne.sol": {
				"GatekeeperOne": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes8",
									"name": "_gateKey",
									"type": "bytes8"
								}
							],
							"name": "enter",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "entrant",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/GatekeeperOne.sol\":60:863  contract GatekeeperOne {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/GatekeeperOne.sol\":60:863  contract GatekeeperOne {\r... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/GatekeeperOne.sol\":60:863  contract GatekeeperOne {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/GatekeeperOne.sol\":60:863  contract GatekeeperOne {\r... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x3370204e\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x9db31d77\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/GatekeeperOne.sol\":710:860  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {\r... */\n    tag_3:\n      tag_5\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_6\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_6:\n        /* \"contracts/GatekeeperOne.sol\":710:860  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {\r... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_7\n      jump\t// in\n    tag_5:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/GatekeeperOne.sol\":90:112  address public entrant */\n    tag_4:\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/GatekeeperOne.sol\":710:860  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {\r... */\n    tag_7:\n        /* \"contracts/GatekeeperOne.sol\":794:798  bool */\n      0x00\n        /* \"contracts/GatekeeperOne.sol\":173:182  tx.origin */\n      origin\n        /* \"contracts/GatekeeperOne.sol\":159:182  msg.sender != tx.origin */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/GatekeeperOne.sol\":159:169  msg.sender */\n      caller\n        /* \"contracts/GatekeeperOne.sol\":159:182  msg.sender != tx.origin */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/GatekeeperOne.sol\":151:183  require(msg.sender != tx.origin) */\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_11:\n        /* \"contracts/GatekeeperOne.sol\":269:270  0 */\n      0x00\n        /* \"contracts/GatekeeperOne.sol\":261:265  8191 */\n      0x1fff\n        /* \"contracts/GatekeeperOne.sol\":249:258  gasleft() */\n      gas\n        /* \"contracts/GatekeeperOne.sol\":249:265  gasleft() % 8191 */\n      dup2\n      tag_13\n      jumpi\n      invalid\n    tag_13:\n      mod\n        /* \"contracts/GatekeeperOne.sol\":249:270  gasleft() % 8191 == 0 */\n      eq\n        /* \"contracts/GatekeeperOne.sol\":241:271  require(gasleft() % 8191 == 0) */\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n        /* \"contracts/GatekeeperOne.sol\":775:783  _gateKey */\n      dup2\n        /* \"contracts/GatekeeperOne.sol\":396:404  _gateKey */\n      dup1\n        /* \"contracts/GatekeeperOne.sol\":389:405  uint64(_gateKey) */\n      0xc0\n      shr\n        /* \"contracts/GatekeeperOne.sol\":354:406  uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)) */\n      0xffff\n      and\n        /* \"contracts/GatekeeperOne.sol\":368:376  _gateKey */\n      dup2\n        /* \"contracts/GatekeeperOne.sol\":361:377  uint64(_gateKey) */\n      0xc0\n      shr\n        /* \"contracts/GatekeeperOne.sol\":354:406  uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)) */\n      0xffffffff\n      and\n      eq\n        /* \"contracts/GatekeeperOne.sol\":346:452  require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), \"GatekeeperOne: invalid gateThree part one\") */\n      tag_16\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x29\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_29b1771185c3518a576bd8f9c5bd6f23be4870a353b1401c23e337f30a5d0cb8\n      0x29\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_16:\n        /* \"contracts/GatekeeperOne.sol\":506:514  _gateKey */\n      dup1\n        /* \"contracts/GatekeeperOne.sol\":499:515  uint64(_gateKey) */\n      0xc0\n      shr\n        /* \"contracts/GatekeeperOne.sol\":471:515  uint32(uint64(_gateKey)) != uint64(_gateKey) */\n      0xffffffffffffffff\n      and\n        /* \"contracts/GatekeeperOne.sol\":485:493  _gateKey */\n      dup2\n        /* \"contracts/GatekeeperOne.sol\":478:494  uint64(_gateKey) */\n      0xc0\n      shr\n        /* \"contracts/GatekeeperOne.sol\":471:515  uint32(uint64(_gateKey)) != uint64(_gateKey) */\n      0xffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/GatekeeperOne.sol\":463:561  require(uint32(uint64(_gateKey)) != uint64(_gateKey), \"GatekeeperOne: invalid gateThree part two\") */\n      tag_17\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x29\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_39fe204b27a3e3ed4d75f8d47c15461cce98adfa1823a4a7fd67c936eb0c84da\n      0x29\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_17:\n        /* \"contracts/GatekeeperOne.sol\":623:632  tx.origin */\n      origin\n        /* \"contracts/GatekeeperOne.sol\":580:634  uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)) */\n      0xffff\n      and\n        /* \"contracts/GatekeeperOne.sol\":594:602  _gateKey */\n      dup2\n        /* \"contracts/GatekeeperOne.sol\":587:603  uint64(_gateKey) */\n      0xc0\n      shr\n        /* \"contracts/GatekeeperOne.sol\":580:634  uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)) */\n      0xffffffff\n      and\n      eq\n        /* \"contracts/GatekeeperOne.sol\":572:682  require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), \"GatekeeperOne: invalid gateThree part three\") */\n      tag_18\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_bfa38229ea3879f03173764f8f4bd3e16aa5bbdfac4aba032e756684dab5eb09\n      0x2b\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_18:\n        /* \"contracts/GatekeeperOne.sol\":821:830  tx.origin */\n      origin\n        /* \"contracts/GatekeeperOne.sol\":811:818  entrant */\n      0x00\n      dup1\n        /* \"contracts/GatekeeperOne.sol\":811:830  entrant = tx.origin */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/GatekeeperOne.sol\":848:852  true */\n      0x01\n        /* \"contracts/GatekeeperOne.sol\":841:852  return true */\n      swap2\n      pop\n        /* \"contracts/GatekeeperOne.sol\":282:283  _ */\n      pop\n        /* \"contracts/GatekeeperOne.sol\":710:860  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/GatekeeperOne.sol\":90:112  address public entrant */\n    tag_9:\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n    stop\n    data_29b1771185c3518a576bd8f9c5bd6f23be4870a353b1401c23e337f30a5d0cb8 476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274206f6e65\n    data_39fe204b27a3e3ed4d75f8d47c15461cce98adfa1823a4a7fd67c936eb0c84da 476174656b65657065724f6e653a20696e76616c69642067617465546872656520706172742074776f\n    data_bfa38229ea3879f03173764f8f4bd3e16aa5bbdfac4aba032e756684dab5eb09 476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274207468726565\n\n    auxdata: 0xa26469706673582212207e6440eac3fa6714ec57c7fe21a6f1e1b53feed5bc75ec864ec5e59a80f84e5e64736f6c63430006000033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610398806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633370204e1461003b5780639db31d771461009c575b600080fd5b6100826004803603602081101561005157600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506100e6565b604051808215151515815260200191505060405180910390f35b6100a46102c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60003273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561012157600080fd5b6000611fff5a8161012e57fe5b061461013957600080fd5b818060c01c61ffff168160c01c63ffffffff16146101a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806102e66029913960400191505060405180910390fd5b8060c01c67ffffffffffffffff168160c01c63ffffffff161415610211576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061030f6029913960400191505060405180910390fd5b3261ffff168160c01c63ffffffff1614610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610338602b913960400191505060405180910390fd5b326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fe476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274206f6e65476174656b65657065724f6e653a20696e76616c69642067617465546872656520706172742074776f476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274207468726565a26469706673582212207e6440eac3fa6714ec57c7fe21a6f1e1b53feed5bc75ec864ec5e59a80f84e5e64736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x398 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3370204E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9DB31D77 EQ PUSH2 0x9C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x82 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA4 PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 ORIGIN PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1FFF GAS DUP2 PUSH2 0x12E JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 PUSH1 0xC0 SHR PUSH2 0xFFFF AND DUP2 PUSH1 0xC0 SHR PUSH4 0xFFFFFFFF AND EQ PUSH2 0x1A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E6 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xC0 SHR PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0xC0 SHR PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x30F PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ORIGIN PUSH2 0xFFFF AND DUP2 PUSH1 0xC0 SHR PUSH4 0xFFFFFFFF AND EQ PUSH2 0x276 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x338 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ORIGIN PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP INVALID SELFBALANCE PUSH2 0x7465 PUSH12 0x65657065724F6E653A20696E PUSH23 0x616C6964206761746554687265652070617274206F6E65 SELFBALANCE PUSH2 0x7465 PUSH12 0x65657065724F6E653A20696E PUSH23 0x616C69642067617465546872656520706172742074776F SELFBALANCE PUSH2 0x7465 PUSH12 0x65657065724F6E653A20696E PUSH23 0x616C696420676174655468726565207061727420746872 PUSH6 0x65A264697066 PUSH20 0x582212207E6440EAC3FA6714EC57C7FE21A6F1E1 0xB5 EXTCODEHASH 0xEE 0xD5 0xBC PUSH22 0xEC864EC5E59A80F84E5E64736F6C6343000600003300 ",
							"sourceMap": "60:803:0:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;60:803:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100365760003560e01c80633370204e1461003b5780639db31d771461009c575b600080fd5b6100826004803603602081101561005157600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506100e6565b604051808215151515815260200191505060405180910390f35b6100a46102c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60003273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561012157600080fd5b6000611fff5a8161012e57fe5b061461013957600080fd5b818060c01c61ffff168160c01c63ffffffff16146101a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806102e66029913960400191505060405180910390fd5b8060c01c67ffffffffffffffff168160c01c63ffffffff161415610211576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061030f6029913960400191505060405180910390fd5b3261ffff168160c01c63ffffffff1614610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610338602b913960400191505060405180910390fd5b326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fe476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274206f6e65476174656b65657065724f6e653a20696e76616c69642067617465546872656520706172742074776f476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274207468726565a26469706673582212207e6440eac3fa6714ec57c7fe21a6f1e1b53feed5bc75ec864ec5e59a80f84e5e64736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3370204E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9DB31D77 EQ PUSH2 0x9C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x82 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA4 PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 ORIGIN PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1FFF GAS DUP2 PUSH2 0x12E JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 PUSH1 0xC0 SHR PUSH2 0xFFFF AND DUP2 PUSH1 0xC0 SHR PUSH4 0xFFFFFFFF AND EQ PUSH2 0x1A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E6 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xC0 SHR PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0xC0 SHR PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x30F PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ORIGIN PUSH2 0xFFFF AND DUP2 PUSH1 0xC0 SHR PUSH4 0xFFFFFFFF AND EQ PUSH2 0x276 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x338 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ORIGIN PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP INVALID SELFBALANCE PUSH2 0x7465 PUSH12 0x65657065724F6E653A20696E PUSH23 0x616C6964206761746554687265652070617274206F6E65 SELFBALANCE PUSH2 0x7465 PUSH12 0x65657065724F6E653A20696E PUSH23 0x616C69642067617465546872656520706172742074776F SELFBALANCE PUSH2 0x7465 PUSH12 0x65657065724F6E653A20696E PUSH23 0x616C696420676174655468726565207061727420746872 PUSH6 0x65A264697066 PUSH20 0x582212207E6440EAC3FA6714EC57C7FE21A6F1E1 0xB5 EXTCODEHASH 0xEE 0xD5 0xBC PUSH22 0xEC864EC5E59A80F84E5E64736F6C6343000600003300 ",
							"sourceMap": "60:803:0:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;60:803:0;;;;;;;;;;;;;;;;;;;;;;;;710:150;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;710:150:0;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;90:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;710:150;794:4;173:9;159:23;;:10;:23;;;;151:32;;;;;;269:1:::1;261:4;249:9;:16;;;;;;:21;241:30;;;::::0;::::1;;775:8:::2;396;389:16;;354:52;;368:8;361:16;;354:52;;;346:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;506:8;499:16;;471:44;;485:8;478:16;;471:44;;;;463:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;623:9;580:54;;594:8;587:16;;580:54;;;572:110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;821:9:::3;811:7;::::0;:19:::3;;;;;;;;;;;;;;;;;;848:4;841:11;;282:1:::2;710:150:::0;;;:::o;90:22::-;;;;;;;;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "184000",
								"executionCost": "226",
								"totalCost": "184226"
							},
							"external": {
								"enter(bytes8)": "infinite",
								"entrant()": "1053"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 60,
									"end": 863,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "MSTORE"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "POP"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "DUP1"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "CODECOPY"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 60,
									"end": 863,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207e6440eac3fa6714ec57c7fe21a6f1e1b53feed5bc75ec864ec5e59a80f84e5e64736f6c63430006000033",
									".code": [
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "MSTORE"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "POP"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "LT"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "JUMPI"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "SHR"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "DUP1"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH",
											"value": "3370204E"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "EQ"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "JUMPI"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "DUP1"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH",
											"value": "9DB31D77"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "EQ"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "JUMPI"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "JUMPDEST"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "DUP1"
										},
										{
											"begin": 60,
											"end": 863,
											"name": "REVERT"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "JUMPDEST"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "DUP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "DUP2"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "ADD"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "DUP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "DUP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "NOT"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "AND"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "ADD"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP3"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP2"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "POP"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "POP"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "POP"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "JUMPDEST"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "MLOAD"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "DUP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "DUP3"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "ISZERO"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "ISZERO"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "ISZERO"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "ISZERO"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "DUP2"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "MSTORE"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "ADD"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP2"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "POP"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "POP"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "MLOAD"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "DUP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP2"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SUB"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "RETURN"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "JUMPDEST"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "JUMPDEST"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "MLOAD"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "DUP1"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "AND"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "AND"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "DUP2"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "MSTORE"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "ADD"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "SWAP2"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "POP"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "POP"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "MLOAD"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "DUP1"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "SWAP2"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "SUB"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "SWAP1"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "RETURN"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "JUMPDEST"
										},
										{
											"begin": 794,
											"end": 798,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 173,
											"end": 182,
											"name": "ORIGIN"
										},
										{
											"begin": 159,
											"end": 182,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 159,
											"end": 182,
											"name": "AND"
										},
										{
											"begin": 159,
											"end": 169,
											"name": "CALLER"
										},
										{
											"begin": 159,
											"end": 182,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 159,
											"end": 182,
											"name": "AND"
										},
										{
											"begin": 159,
											"end": 182,
											"name": "EQ"
										},
										{
											"begin": 159,
											"end": 182,
											"name": "ISZERO"
										},
										{
											"begin": 151,
											"end": 183,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 151,
											"end": 183,
											"name": "JUMPI"
										},
										{
											"begin": 151,
											"end": 183,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 151,
											"end": 183,
											"name": "DUP1"
										},
										{
											"begin": 151,
											"end": 183,
											"name": "REVERT"
										},
										{
											"begin": 151,
											"end": 183,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 151,
											"end": 183,
											"name": "JUMPDEST"
										},
										{
											"begin": 269,
											"end": 270,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 261,
											"end": 265,
											"name": "PUSH",
											"value": "1FFF"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "GAS"
										},
										{
											"begin": 249,
											"end": 265,
											"name": "DUP2"
										},
										{
											"begin": 249,
											"end": 265,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 249,
											"end": 265,
											"name": "JUMPI"
										},
										{
											"begin": 249,
											"end": 265,
											"name": "INVALID"
										},
										{
											"begin": 249,
											"end": 265,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 249,
											"end": 265,
											"name": "JUMPDEST"
										},
										{
											"begin": 249,
											"end": 265,
											"name": "MOD"
										},
										{
											"begin": 249,
											"end": 270,
											"name": "EQ"
										},
										{
											"begin": 241,
											"end": 271,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 241,
											"end": 271,
											"name": "JUMPI"
										},
										{
											"begin": 241,
											"end": 271,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 241,
											"end": 271,
											"name": "DUP1"
										},
										{
											"begin": 241,
											"end": 271,
											"name": "REVERT"
										},
										{
											"begin": 241,
											"end": 271,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 241,
											"end": 271,
											"name": "JUMPDEST"
										},
										{
											"begin": 775,
											"end": 783,
											"name": "DUP2"
										},
										{
											"begin": 396,
											"end": 404,
											"name": "DUP1"
										},
										{
											"begin": 389,
											"end": 405,
											"name": "PUSH",
											"value": "C0"
										},
										{
											"begin": 389,
											"end": 405,
											"name": "SHR"
										},
										{
											"begin": 354,
											"end": 406,
											"name": "PUSH",
											"value": "FFFF"
										},
										{
											"begin": 354,
											"end": 406,
											"name": "AND"
										},
										{
											"begin": 368,
											"end": 376,
											"name": "DUP2"
										},
										{
											"begin": 361,
											"end": 377,
											"name": "PUSH",
											"value": "C0"
										},
										{
											"begin": 361,
											"end": 377,
											"name": "SHR"
										},
										{
											"begin": 354,
											"end": 406,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 354,
											"end": 406,
											"name": "AND"
										},
										{
											"begin": 354,
											"end": 406,
											"name": "EQ"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "JUMPI"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "MLOAD"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP2"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "MSTORE"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "ADD"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP1"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP1"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "ADD"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP3"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP2"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "SUB"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP3"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "MSTORE"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP2"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "MSTORE"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "ADD"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP1"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH data",
											"value": "29B1771185C3518A576BD8F9C5BD6F23BE4870A353B1401C23E337F30A5D0CB8"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "SWAP2"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "CODECOPY"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "ADD"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "SWAP2"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "POP"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "POP"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "MLOAD"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "DUP1"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "SWAP2"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "SUB"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "SWAP1"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "REVERT"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 346,
											"end": 452,
											"name": "JUMPDEST"
										},
										{
											"begin": 506,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 499,
											"end": 515,
											"name": "PUSH",
											"value": "C0"
										},
										{
											"begin": 499,
											"end": 515,
											"name": "SHR"
										},
										{
											"begin": 471,
											"end": 515,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 471,
											"end": 515,
											"name": "AND"
										},
										{
											"begin": 485,
											"end": 493,
											"name": "DUP2"
										},
										{
											"begin": 478,
											"end": 494,
											"name": "PUSH",
											"value": "C0"
										},
										{
											"begin": 478,
											"end": 494,
											"name": "SHR"
										},
										{
											"begin": 471,
											"end": 515,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 471,
											"end": 515,
											"name": "AND"
										},
										{
											"begin": 471,
											"end": 515,
											"name": "EQ"
										},
										{
											"begin": 471,
											"end": 515,
											"name": "ISZERO"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "JUMPI"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "MLOAD"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP2"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "MSTORE"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "ADD"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP1"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP1"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "ADD"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP3"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP2"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "SUB"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP3"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "MSTORE"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP2"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "MSTORE"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "ADD"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP1"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH data",
											"value": "39FE204B27A3E3ED4D75F8D47C15461CCE98ADFA1823A4A7FD67C936EB0C84DA"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "SWAP2"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "CODECOPY"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "ADD"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "SWAP2"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "POP"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "POP"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "MLOAD"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "DUP1"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "SWAP2"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "SUB"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "SWAP1"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "REVERT"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 463,
											"end": 561,
											"name": "JUMPDEST"
										},
										{
											"begin": 623,
											"end": 632,
											"name": "ORIGIN"
										},
										{
											"begin": 580,
											"end": 634,
											"name": "PUSH",
											"value": "FFFF"
										},
										{
											"begin": 580,
											"end": 634,
											"name": "AND"
										},
										{
											"begin": 594,
											"end": 602,
											"name": "DUP2"
										},
										{
											"begin": 587,
											"end": 603,
											"name": "PUSH",
											"value": "C0"
										},
										{
											"begin": 587,
											"end": 603,
											"name": "SHR"
										},
										{
											"begin": 580,
											"end": 634,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 580,
											"end": 634,
											"name": "AND"
										},
										{
											"begin": 580,
											"end": 634,
											"name": "EQ"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "JUMPI"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "MLOAD"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP2"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "MSTORE"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "ADD"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP1"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP1"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "ADD"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP3"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP2"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "SUB"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP3"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "MSTORE"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "2B"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP2"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "MSTORE"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "ADD"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP1"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH data",
											"value": "BFA38229EA3879F03173764F8F4BD3E16AA5BBDFAC4ABA032E756684DAB5EB09"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "2B"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "SWAP2"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "CODECOPY"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "ADD"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "SWAP2"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "POP"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "POP"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "MLOAD"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "DUP1"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "SWAP2"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "SUB"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "SWAP1"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "REVERT"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 572,
											"end": 682,
											"name": "JUMPDEST"
										},
										{
											"begin": 821,
											"end": 830,
											"name": "ORIGIN"
										},
										{
											"begin": 811,
											"end": 818,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 811,
											"end": 818,
											"name": "DUP1"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "EXP"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "DUP2"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "SLOAD"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "DUP2"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "MUL"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "NOT"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "AND"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "SWAP1"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "DUP4"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "AND"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "MUL"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "OR"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "SWAP1"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "SSTORE"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "POP"
										},
										{
											"begin": 848,
											"end": 852,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 841,
											"end": 852,
											"name": "SWAP2"
										},
										{
											"begin": 841,
											"end": 852,
											"name": "POP"
										},
										{
											"begin": 282,
											"end": 283,
											"name": "POP"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP2"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "SWAP1"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "POP"
										},
										{
											"begin": 710,
											"end": 860,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "JUMPDEST"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "DUP1"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "SWAP1"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "SLOAD"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "SWAP1"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "EXP"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "SWAP1"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "DIV"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "AND"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "DUP2"
										},
										{
											"begin": 90,
											"end": 112,
											"name": "JUMP",
											"value": "[out]"
										}
									],
									".data": {
										"29B1771185C3518A576BD8F9C5BD6F23BE4870A353B1401C23E337F30A5D0CB8": "476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274206f6e65",
										"39FE204B27A3E3ED4D75F8D47C15461CCE98ADFA1823A4A7FD67C936EB0C84DA": "476174656b65657065724f6e653a20696e76616c69642067617465546872656520706172742074776f",
										"BFA38229EA3879F03173764F8F4BD3E16AA5BBDFAC4ABA032E756684DAB5EB09": "476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274207468726565"
									}
								}
							}
						},
						"methodIdentifiers": {
							"enter(bytes8)": "3370204e",
							"entrant()": "9db31d77"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"_gateKey\",\"type\":\"bytes8\"}],\"name\":\"enter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entrant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/GatekeeperOne.sol\":\"GatekeeperOne\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/GatekeeperOne.sol\":{\"keccak256\":\"0x836c7877e57a6745a2fa0a18895e35550bce83990b24ee511ee4727b4aa7f534\",\"urls\":[\"bzz-raw://09ba5671ed7f34b3ad5ba6028c172a34b72b4237f197eea3d4b0b388eccf859f\",\"dweb:/ipfs/Qmd9KwXQw9CgTt5K6u1rewS514KDGrg3QE47NxsoLDegiQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "contracts/GatekeeperOne.sol:GatekeeperOne",
								"label": "entrant",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"contracts/GatekeeperOne.sol": {
				"ast": {
					"absolutePath": "contracts/GatekeeperOne.sol",
					"exportedSymbols": {
						"GatekeeperOne": [
							112
						]
					},
					"id": 113,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112
							],
							"name": "GatekeeperOne",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "9db31d77",
									"id": 3,
									"name": "entrant",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 112,
									"src": "90:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "90:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 14,
										"nodeType": "Block",
										"src": "140:63:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															"id": 10,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 6,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 127,
																	"src": "159:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 7,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "159:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 8,
																	"name": "tx",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 139,
																	"src": "173:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_transaction",
																		"typeString": "tx"
																	}
																},
																"id": 9,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "origin",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "173:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "159:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 5,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															130,
															131
														],
														"referencedDeclaration": 130,
														"src": "151:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 11,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "151:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 12,
												"nodeType": "ExpressionStatement",
												"src": "151:32:0"
											},
											{
												"id": 13,
												"nodeType": "PlaceholderStatement",
												"src": "194:1:0"
											}
										]
									},
									"documentation": null,
									"id": 15,
									"name": "gateOne",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "137:2:0"
									},
									"src": "121:82:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 27,
										"nodeType": "Block",
										"src": "230:61:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 23,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 21,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 18,
																		"name": "gasleft",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 120,
																		"src": "249:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 19,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "249:9:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "%",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "38313931",
																	"id": 20,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "261:4:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8191_by_1",
																		"typeString": "int_const 8191"
																	},
																	"value": "8191"
																},
																"src": "249:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 22,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "269:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "249:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 17,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															130,
															131
														],
														"referencedDeclaration": 130,
														"src": "241:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "241:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 25,
												"nodeType": "ExpressionStatement",
												"src": "241:30:0"
											},
											{
												"id": 26,
												"nodeType": "PlaceholderStatement",
												"src": "282:1:0"
											}
										]
									},
									"documentation": null,
									"id": 28,
									"name": "gateTwo",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "227:2:0"
									},
									"src": "211:80:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 88,
										"nodeType": "Block",
										"src": "335:367:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 37,
																				"name": "_gateKey",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "368:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes8",
																					"typeString": "bytes8"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes8",
																					"typeString": "bytes8"
																				}
																			],
																			"id": 36,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "361:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint64_$",
																				"typeString": "type(uint64)"
																			},
																			"typeName": {
																				"id": 35,
																				"name": "uint64",
																				"nodeType": "ElementaryTypeName",
																				"src": "361:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": null,
																					"typeString": null
																				}
																			}
																		},
																		"id": 38,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "361:16:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 34,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "354:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint32_$",
																		"typeString": "type(uint32)"
																	},
																	"typeName": {
																		"id": 33,
																		"name": "uint32",
																		"nodeType": "ElementaryTypeName",
																		"src": "354:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "354:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 44,
																				"name": "_gateKey",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "396:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes8",
																					"typeString": "bytes8"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes8",
																					"typeString": "bytes8"
																				}
																			],
																			"id": 43,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "389:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint64_$",
																				"typeString": "type(uint64)"
																			},
																			"typeName": {
																				"id": 42,
																				"name": "uint64",
																				"nodeType": "ElementaryTypeName",
																				"src": "389:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": null,
																					"typeString": null
																				}
																			}
																		},
																		"id": 45,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "389:16:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 41,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "382:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint16_$",
																		"typeString": "type(uint16)"
																	},
																	"typeName": {
																		"id": 40,
																		"name": "uint16",
																		"nodeType": "ElementaryTypeName",
																		"src": "382:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "382:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"src": "354:52:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274206f6e65",
															"id": 48,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "408:43:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_29b1771185c3518a576bd8f9c5bd6f23be4870a353b1401c23e337f30a5d0cb8",
																"typeString": "literal_string \"GatekeeperOne: invalid gateThree part one\""
															},
															"value": "GatekeeperOne: invalid gateThree part one"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_29b1771185c3518a576bd8f9c5bd6f23be4870a353b1401c23e337f30a5d0cb8",
																"typeString": "literal_string \"GatekeeperOne: invalid gateThree part one\""
															}
														],
														"id": 32,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															130,
															131
														],
														"referencedDeclaration": 131,
														"src": "346:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 49,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "346:106:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 50,
												"nodeType": "ExpressionStatement",
												"src": "346:106:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 56,
																				"name": "_gateKey",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "485:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes8",
																					"typeString": "bytes8"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes8",
																					"typeString": "bytes8"
																				}
																			],
																			"id": 55,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "478:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint64_$",
																				"typeString": "type(uint64)"
																			},
																			"typeName": {
																				"id": 54,
																				"name": "uint64",
																				"nodeType": "ElementaryTypeName",
																				"src": "478:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": null,
																					"typeString": null
																				}
																			}
																		},
																		"id": 57,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "478:16:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 53,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "471:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint32_$",
																		"typeString": "type(uint32)"
																	},
																	"typeName": {
																		"id": 52,
																		"name": "uint32",
																		"nodeType": "ElementaryTypeName",
																		"src": "471:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 58,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "471:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 61,
																		"name": "_gateKey",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 30,
																		"src": "506:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes8",
																			"typeString": "bytes8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes8",
																			"typeString": "bytes8"
																		}
																	],
																	"id": 60,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "499:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 59,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "499:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "499:16:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "471:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "476174656b65657065724f6e653a20696e76616c69642067617465546872656520706172742074776f",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "517:43:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_39fe204b27a3e3ed4d75f8d47c15461cce98adfa1823a4a7fd67c936eb0c84da",
																"typeString": "literal_string \"GatekeeperOne: invalid gateThree part two\""
															},
															"value": "GatekeeperOne: invalid gateThree part two"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_39fe204b27a3e3ed4d75f8d47c15461cce98adfa1823a4a7fd67c936eb0c84da",
																"typeString": "literal_string \"GatekeeperOne: invalid gateThree part two\""
															}
														],
														"id": 51,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															130,
															131
														],
														"referencedDeclaration": 131,
														"src": "463:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "463:98:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "463:98:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 72,
																				"name": "_gateKey",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "594:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes8",
																					"typeString": "bytes8"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes8",
																					"typeString": "bytes8"
																				}
																			],
																			"id": 71,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "587:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint64_$",
																				"typeString": "type(uint64)"
																			},
																			"typeName": {
																				"id": 70,
																				"name": "uint64",
																				"nodeType": "ElementaryTypeName",
																				"src": "587:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": null,
																					"typeString": null
																				}
																			}
																		},
																		"id": 73,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "587:16:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 69,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "580:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint32_$",
																		"typeString": "type(uint32)"
																	},
																	"typeName": {
																		"id": 68,
																		"name": "uint32",
																		"nodeType": "ElementaryTypeName",
																		"src": "580:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 74,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "580:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"expression": {
																					"argumentTypes": null,
																					"id": 79,
																					"name": "tx",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 139,
																					"src": "623:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_transaction",
																						"typeString": "tx"
																					}
																				},
																				"id": 80,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "origin",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": null,
																				"src": "623:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			],
																			"id": 78,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "615:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint160_$",
																				"typeString": "type(uint160)"
																			},
																			"typeName": {
																				"id": 77,
																				"name": "uint160",
																				"nodeType": "ElementaryTypeName",
																				"src": "615:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": null,
																					"typeString": null
																				}
																			}
																		},
																		"id": 81,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "615:18:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	],
																	"id": 76,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "608:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint16_$",
																		"typeString": "type(uint16)"
																	},
																	"typeName": {
																		"id": 75,
																		"name": "uint16",
																		"nodeType": "ElementaryTypeName",
																		"src": "608:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 82,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "608:26:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"src": "580:54:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "476174656b65657065724f6e653a20696e76616c6964206761746554687265652070617274207468726565",
															"id": 84,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "636:45:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bfa38229ea3879f03173764f8f4bd3e16aa5bbdfac4aba032e756684dab5eb09",
																"typeString": "literal_string \"GatekeeperOne: invalid gateThree part three\""
															},
															"value": "GatekeeperOne: invalid gateThree part three"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bfa38229ea3879f03173764f8f4bd3e16aa5bbdfac4aba032e756684dab5eb09",
																"typeString": "literal_string \"GatekeeperOne: invalid gateThree part three\""
															}
														],
														"id": 67,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															130,
															131
														],
														"referencedDeclaration": 131,
														"src": "572:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 85,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "572:110:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 86,
												"nodeType": "ExpressionStatement",
												"src": "572:110:0"
											},
											{
												"id": 87,
												"nodeType": "PlaceholderStatement",
												"src": "693:1:0"
											}
										]
									},
									"documentation": null,
									"id": 89,
									"name": "gateThree",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"name": "_gateKey",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 89,
												"src": "318:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes8",
													"typeString": "bytes8"
												},
												"typeName": {
													"id": 29,
													"name": "bytes8",
													"nodeType": "ElementaryTypeName",
													"src": "318:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes8",
														"typeString": "bytes8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "317:17:0"
									},
									"src": "299:403:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "800:60:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 106,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 103,
														"name": "entrant",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "811:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 104,
															"name": "tx",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 139,
															"src": "821:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_transaction",
																"typeString": "tx"
															}
														},
														"id": 105,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "origin",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "821:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "811:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 107,
												"nodeType": "ExpressionStatement",
												"src": "811:19:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "848:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 102,
												"id": 109,
												"nodeType": "Return",
												"src": "841:11:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "3370204e",
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 94,
											"modifierName": {
												"argumentTypes": null,
												"id": 93,
												"name": "gateOne",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 15,
												"src": "749:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "749:7:0"
										},
										{
											"arguments": null,
											"id": 96,
											"modifierName": {
												"argumentTypes": null,
												"id": 95,
												"name": "gateTwo",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 28,
												"src": "757:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "757:7:0"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"id": 98,
													"name": "_gateKey",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 91,
													"src": "775:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes8",
														"typeString": "bytes8"
													}
												}
											],
											"id": 99,
											"modifierName": {
												"argumentTypes": null,
												"id": 97,
												"name": "gateThree",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 89,
												"src": "765:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_bytes8_$",
													"typeString": "modifier (bytes8)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "765:19:0"
										}
									],
									"name": "enter",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"name": "_gateKey",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 111,
												"src": "725:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes8",
													"typeString": "bytes8"
												},
												"typeName": {
													"id": 90,
													"name": "bytes8",
													"nodeType": "ElementaryTypeName",
													"src": "725:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes8",
														"typeString": "bytes8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "724:17:0"
									},
									"returnParameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 111,
												"src": "794:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 100,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "794:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "793:6:0"
									},
									"scope": 112,
									"src": "710:150:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 113,
							"src": "60:803:0"
						}
					],
					"src": "33:830:0"
				},
				"id": 0
			}
		}
	}
}